@startuml

skinparam linetype ortho
set namespaceSeparator none
'hide circle

package engine {
    abstract class Actor <<abstract>>
    abstract class WeaponItem <<abstract>>
    interface Action <<interface>>
}

package game {

    package enemies {
        abstract class Enemy <<abstract>>
        class HeavySkeletalSwordsman
        class LoneWolf
        class GiantCrab
    }

    package traders {
        abstract class Trader <<abstract>>
        class MerchantKale
    }

    package actions {
        class PurchaseAction
    }

    package items {
        interface Consumables <<interface>>

        class Rune
        class Grossmesser
        class Club
    }

    ' Player
    class Player

    ' Driver Class
    class Application
}




    ' ========== Generalisations (Parent/Child) ==========

    MerchantKale --|> Trader

    Trader --|> Actor

    HeavySkeletalSwordsman -[#blue]-|> Enemy
    LoneWolf -[#blue]-|> Enemy
    GiantCrab -[#blue]-|> Enemy

    Club -[#green]-|> WeaponItem
    Grossmesser -[#green]-|> WeaponItem

    PurchaseAction --|> Action




    ' ========== Realisations (Interfaces) ==========

    ' Runes are consumable
    Rune ..|> Consumables




    ' ========== Associations ==========

    ' MerchantKale who trades weapons
    MerchantKale "1" --> "0..*" Club : transacts
    MerchantKale "1" --> "0..*" Grossmesser : buys

    ' Enemies dropping Runes
    HeavySkeletalSwordsman --> "1" Rune : drops
    LoneWolf --> "1" Rune : drops
    GiantCrab --> "1" Rune : drops




    ' ========== Dependencies ==========

    ' Application creates MerchantKale
    Application .> MerchantKale

    ' Application creates Enemies
    Application ..> HeavySkeletalSwordsman
    Application ..> LoneWolf
    Application ..> GiantCrab

    ' Rune adds to the Player's runes balance
    Rune ..> Player

    ' Player interacts with MerchantKale
    Player ..> MerchantKale

    ' MerchantKale creates a PurchaseAction
    MerchantKale ..> PurchaseAction
}

@enduml
